#-
#- Custom Toolchain Test.
#- Define or extend a toolchain with custom operations, extensions, etc.
#- Useful to provide higher-level commands to generate complex objects like
#- drivers, binary files, modules... whatever format your environment defines.
#- In this test, the gnu toolchain is extended with a new target `myelf`
#- which links argainst `crtend` and `crtbegin` components.
#-

# previous option generates a file to be cleaned up
m.in/clean += hello.map

# global CFLAGS
m.in/toolchain/gnu/cflags  := -O3 -Wall -Wextra -nostdinc

# global LDFLAGS
m.in/toolchain/gnu/ldflags := --fatal-warnings -nostdlib

# Use `myelf` custom rule and let the magic happen.
# It allows users to abstract complex constructions
# and keep a declarative style.
$(eval $(call make, myelf, hello,-static -Map=hello.map))

$(eval $(call include,src))

# require `printer`'s interface
$(eval $(call require,printer))

$(eval $(call add,src/main.c))

# link against component `printer` (i.e. pull its implementation)
$(eval $(call link,printer))

# implicit-based target
$(eval $(call make_implicit,hello.bin))
$(eval $(call prereq,hello))
